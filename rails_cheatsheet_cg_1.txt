#########################################################################################################
# Created by: h|eg "rails|rake" | sed -e "s/\s*[0-9]*\s*//" | tee -a ~/dotfiles/rails_cheatsheet_cg_1.txt
#########################################################################################################

# rake db:migrate
# rake db:rollback
# rake db:migrate:status
# rake --tasks
# rails c
#     Then: 'Hirb.enable'  (see ~/workspace/rails_apps/tutorial_apps/league/.pryrc)
#           chris = Player.create(name: "", age: 51)
#
# rails g model player name:string age:integer

# rails g model address street:string player:references
# ==>
#        class Address < ApplicationRecord
#          belongs_to :player   # automatically (by 'player:references') created association
#                               # creates a 'player_id' column (= 'foreign-key' to the 'Players-Table') in the 'Address-Table'
#                               # which references one Player in the 'Player-table'
#                               # i.e. an address keeps track which player lives on that address
#                               # i.e. an instance_method (:player) will be created on an Address object
#                               # that when called queries the Player-Table which Player belongs to that address
#        end

#
#        cat  db/migrate/20200625170445_create_addresses.rb
#
#        class CreateAddresses < ActiveRecord::Migration[6.0]
#          def change
#            create_table :addresses do |t|
#              t.string :street
#              t.references :player, null: false, foreign_key: true
#
#              t.timestamps
#            end
#          end
#        end
#
#


cd /home/cg/workspace/rails_apps/tutorial_apps/CS50_Rails_Seminar/todo_list_final/
rake db:migrate
rake db:migrate
vi /home/cg/workspace/rails_apps/tutorial_apps/CS50_Rails_Seminar/todo_list_final/db/migrate/20151101200932_create_items.rb
v /home/cg/workspace/rails_apps/tutorial_apps/CS50_Rails_Seminar/todo_list_final/db/migrate/20151101200932_create_items.rb
rake db:migrate
rails s
rails s -h
rails s -u thin
rails s -u puma
rails new pokedex
rails g scaffold Pokemon name:string element:string
rake db:migrate
alias r_s='rails s'
cd ~/workspace/rails_apps/tutorial_apps/pokedex
cd ~/workspace/rails_apps/tutorial_apps/pokedex
cd workspace/rails_apps/tutorial_apps/blog/node_modules/querystring/test
rake db:migrate:status
alias r_dbm='rake db:migrate'
rake db:migrate:status
rails c
rake db:migrate:status
rake db:rollback
rake db:migrate:status
rails c
alias r_dbr='rake db:rollback'
rails c
alias r_dbs='rake db:migrate:status'
rake db:status
rake -T
rake db:migrate:status
rake db:migrate
rake db:migrate:status
h|egrep "rails|rake"
h|egrep "rails|rake" >> ~/dotfiles/rails_cheatsheet_cg_1.txt
vi ~/dotfiles/rails_cheatsheet_cg_1.txt
~/workspace/rails_apps/tutorial_apps/league
~/workspace/rails_apps/tutorial_apps/league
rails db:migrate:status
rake db:migrate:status
alias r_dbm='rails --tasks'
rails --help
rails g --help
rails g -h
rails -h
rails t
h|egrep "rails|rake"
rails db:migrate:status
rails db:rollback
rails db:migrate:status
rails db:rollback
rails db:migrate:status
rails db:migrate
rails db:migrate:status
cd /home/cg/workspace/rails_apps/tutorial_apps/league/



Add new migrations (See https://guides.rubyonrails.org/active_record_migrations.html )
------------------

rails g migration AddColumnLastNameToPlayers

# => db/migrate/20200624163611_add_column_last_name_to_players.rb    will be created with EMPTY 'change' CALLBACK METHOD !!!
#
# cat db/migrate/20200624163611_add_column_last_name_to_players.rb
#
# class AddColumnLastNameToPlayers < ActiveRecord::Migration[6.0]
#   def change
#   end
# end
#
# Then edit this file by inserting the intended behavior expresses by the name of the migration (AddColumnLastNameToPlayers)
#
# cat db/migrate/20200624163611_add_column_last_name_to_players.rb
# class AddColumnLastNameToPlayers < ActiveRecord::Migration[6.0]
#   def change
#     add_column :players, :last_name, :string
#   end
# end


# rails g migraton RenameNameColumnToFirstName

# cat db/migrate/20200624163611_add_column_last_name_to_players.rb
class ActiveRecord::Migration[6.0]
    def change
        rename_column :pplayers, :name, :first_name
    end
end


# Check migration status
# rake db:migrate:status     # r_db_status
#
# ==> We see that the status of the last migration inside the displayed migrations table is 'down'
down     20200624163611  Add column last name to players

# Run "rake db:migrate"      # r_db_migrate
# ==> runs migration and hence (if successfull) changes the status of the new migration to 'up'

# Run "rake db:rollback"     # r_db_rollback
# ==> rolls back last migration whose status is 'up'

# rake db:rollback STEP=3
# ==> rolls back the last 3 successfull migrations





Rails Validations (see https://guides.rubyonrails.org/active_record_validations.html )
-----------------

# There are 2 types of validations:

## validations running on new data before entering the DB
      (e.g. to verify user data [filled in form and form submitted])

## validations running on existing data
      ( = updating data in the DB)



Edit app/models/player.rb:

class Address < ApplicationRecord      # subclasses ActiveRecord::Base
end


#######
class Player < ApplicationRecord
  has_one :address # a Player can only have one address at a time
  # an instance_method (:address) will be created on an Player object
  # that when called queries the Address-Table which Address belongs to that player

  belongs_to :team # Manually added: creates an instance method 'team' on player object

  has_many :appearances
  has_many :games, through: :appearances                   # via Accociation-table Appearance

  # has_many :friend    # a Player can have more than one Friends

  validates :first_name, presence: true

  # Expect a non-empty last_name ONLY when Player object is created
  # Note that by restricting via (on: create)
  # setting an existing NON-empty last_name to "" (=> eraase last_name)
  # was made possible
  validates :last_name, presence: true, on: :create

  validates :age, presence: true, numericality: {greater_than: 0, less_than_or_equal_to: 100}


  # Also consider custom validation :first_name_starts_with_vowel?
  validate :first_name, :first_name_starts_with_vowel?

  # Custom validation
  def first_name_starts_with_vowel?
    vowels = "aeiou".split("")
    unless vowels.include? first_name[0].downcase
      errors.add(:first_name, "must start with a vowel")
    end
  end

end

#######

class Game  < ApplicationRecord       # subclasses ActiveRecord::Base
    has_many :appearances
    has_many :players, through: :appearances                 # via Accociation-table Appearance
end

# Apperance is in association-table  (keeps track which player belongs to which games and vice versa (many-to-many relationship))
# i.e. which Games a player plays and which Players are participating in a Game
class Appearance < ApplicationRecord   # subclasses ActiveRecord::Base
    belongs_to :player
    belongs_to :game
end

class Team < ApplicationRecord         # subclasses ActiveRecord::Base
    has_many :players                  # manually added: indicates that an owner (Team) can have more than one ownees (Player)
end



# MANY-TO-MANY relationships (2:22:30)

rails g model team name:string

rails g migration AddTeamReferenceToPlayer team:references

==>

class AddTeamReferenceToPlayer < ActiveRecord::Migration[6.0]
  def change
    # add_reference :players, :team, null: false, foreign_key: true   # Generated by rails (via team:references )
                                                                      # in 'rails g  migration AddTeamReferenceToPlayer team:references'
                                                                      # ==> have to manually change 'null:false' to 'null:true'
                                                                      # to prevent migration being rolled back by SQLite3
    add_reference :players, :team, null: true, foreign_key: true
  end
end






TDD via RSpec
-------------

1. Add dome gems to Gemfile

    group :development, :test do
        gem 'rspec-rails'
    end

    group :test do
        ...
        add 'capybara'
    end

    group :development do
        ...
        add 'capybara'
    end

    # Added by CG
    gem 'pry-rails', :group => :development
    gem 'hirb', :group => :development   # Pretty print DB tables  (using 'Hirb.enable' in irb/pry console before accessing players DB via 'Player.all')


2. bundle install


3. Now many new rails GENERATORs were installed:
   (we are interested in: rails g rspec:install)

4.  rails g rspec:install

    => generates:
         create  spec/spec_helper.rb
         create  spec/rails_helper.rb


5. Running RSpec tests

    - rspec spec/features/listing_players_spec.rb    # should fail because Symbol Player is not defined


    -  cg@cg-virtualbox:~/workspace/rails_apps/tutorial_apps/tdd () $ rails g model player first_name:string last_name:string --no-test-framework
        Running via Spring preloader in process 241622
            invoke  active_record
            create    db/migrate/20200630090144_create_players.rb
            create    app/models/player.rb
        cg@cg-virtualbox:~/workspace/rails_apps/tutorial_apps/tdd () $

    - rake db:migrate


    - rspec spec/features/listing_players_spec.rb    # should fail but now due to RoutingError:  No route matches [GET] "/"
      ==>
        ....
        1) List players displays the first name and last name from the players saved
        Failure/Error: visit "/"

        ActionController::RoutingError:
        No route matches [GET] "/"
        # ./spec/features/listing_players_spec.rb:8:in `block (2 levels) in <top (required)>'

    - Add route in config/routes.rb:  get "/" => "players#index"

    - rspec spec/features/listing_players_spec.rb    # should fail but now due to RoutingError: uninitialized constant PlayersController
        ActionController::RoutingError:
        uninitialized constant PlayersController

    - rails g controller Players --no-test-framework

    - add index 'action' to app/controllers/players_controller.rb:
        class PlayersController < ApplicationController
            def index
            end
        end

    - rspec spec/features/listing_players_spec.rb    # should fail but now due to RoutingError: ActionController::MissingExactTemplate

    - create new view-file app/views/players/index.html.erb
        <h1>Listing players</h1>
        <p>Eduardo Baik</p>
        <p>Christopher Burns</p>
        <% link_to "New Player", "/players/new" %>

    - rspec spec/features/listing_players_spec.rb    # should now SUCCEED :-)
        Finished in 0.12213 seconds (files took 1.27 seconds to load)
        1 example, 0 failures


    - Get rid of hard-coding in index.html.erb ==> Edit players-controller to pass respective players from DB to the view via instance attributes
        class PlayersController < ApplicationController
            def index
                @players = Player.all
            end
        end

    - Use instance attributes (@players) in view index.html.erb
        ...
        <% @players.each do |player| %>
        <tr>
            <td><%= player.first_name %></td>
            <td><%= player.last_name %></td>
        </tr>
        ...

    - Now test a new feature (new_player)

    - Create file features/new_player_spec.rb

    - edit routes.rb
    Rails.application.routes.draw do
        # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html
        root "players#index"
        get "players" => "players#index"
        get "players/new" => "players#new"
    end


    - Add 'new' action to players_controller.rb
      def new
        @player = Player.new
      end

    - Add new view file app/views/players/new.html.erb

    - Create new feature file features/create_player_spec.rb

    - Edit routes.rb

    - Add action 'create' and private function params to players_controller.rb

    - Add validaton code to app/models/player.rb
        class Player < ApplicationRecord
            validates :first_name, :last_name, presence: true
        end

    - Now both test cases should succeed


    - Run all feature tests by passing the features-folder:     rspec spec/features/

    - Next lets test the show page feature

    - Create new file features/show_player_spec.rb

    - Next lets test the edit page feature

    - Create new file features/edit_player_spec.rb

    - Next lets test the update page feature

    - Create new file features/update_player_spec.rb

    - Before we test we want to reset the TEST DB

      - rake db:reset RAILS_ENV=test

    - Create new file features/destroy_player_spec.rb

    - Before we test we want to reset the TEST DB

      - rake db:reset RAILS_ENV=test


    - Styling the views

      - Every time RAILS it told to generate a controller a respective EMPTY .scss style-sheet is generated for that controller (CG-NOTE: this might not be th case anymore with RAILS 6.x hence we create it manually)
        e.g  app/assets/stylesheets/player.scss:

        // Place all the styles related to the Players controller here.
        // They will automatically be included in application.css.
        // You can use Sass (SCSS) here: https://sass-lang.com/
        h1 {
            color: red;
        }

      - To integrate bootstrap the github.com/twbs/bootstrap-sass and follow the steps

        1. add 'bootstrap-sass' and 'sass-rails' GEMs to the project's Gemfile

        2. Import Bootstrap styles in the existing app/assets/stylesheets/application.css:
            // "bootstrap-sprockets" must be imported before "bootstrap" and "bootstrap/variables"
            @import "bootstrap-sprockets";
            @import "bootstrap";

        3. Rename the existing app/assets/stylesheets/application.css  to app/assets/stylesheets/application.scss

        4. Remove the existing 'require_tree' and 'require_self' entries in app/assets/stylesheets/application.scss
           Note that after those are removed the app/assets/stylesheets/player.scss is not considered anymore and hence has no effect
           If players.scss shall be considered nonetheless the following import needs to be added in the application.scss file
           @import "players";


    - User Login and administration (sessions)

    1. Add to Gemfile:
        # Use Active Model has_secure_password
        gem 'bcrypt', '~> 3.1.7'

    2. bundle install

    3. rails g controller users

    4. rails g model user name:string email:string password:digest

    4. In rails console:
        User.all   #=> should be empty
        u = User.new
        u.name = "John"
        u.email = "John@doe.com"
        u.password = "password"
        u.password_confirmation = "password"
        u.save
        User.all   # Note that the password_digest has been set automatically and 'password' and 'password_confirmation'
                   # are invisibile in DB (they don't exist in schema.rb)
                   # instead 'brypt' computed (if 'password' and 'password_confirmtion' matched) the 'password_digest'
                   # and stored it in the DB
        User Load (0.2ms)  SELECT "users".* FROM "users"
        +----+------+--------------+--------------------------------------------------------------+-------------------------+-------------------------+
        | id | name | email        | password_digest                                              | created_at              | updated_at              |
        +----+------+--------------+--------------------------------------------------------------+-------------------------+-------------------------+
        | 1  | John | John@doe.com | $2a$12$9MT0ws7VPVVLlSruU5jI8Oge4BlEJ/jOncrOwfFEAbBtvaaLW6FFK | 2020-06-30 14:47:48 UTC | 2020-06-30 14:47:48 UTC |
        +----+------+--------------+--------------------------------------------------------------+-------------------------+-------------------------+
        1 row in set

        u.name = "Jane"
        u.email = "Jane@doe.com"
        u.password = "password"
        u.password_confirmation = "wong_password"
        u.save
        => false    # ROLLED BACK BECAUSE password and password_confirmation didn't match
        u.errors.full_messages
        => ["Password confirmation doesn't match Password"]

        u.authenticate("sdfkghsdfsdjcfjdghsdf")      # trying to authenticate with an incorrect password returns false
        => false
        u.authenticate("password")                   # But trying to authenticate with the correct password suceeds and return the resp. user
        +----+------+--------------+--------------------------------------------------------------+------------+------------+
        | id | name | email        | password_digest                                              | created_at | updated_at |
        +----+------+--------------+--------------------------------------------------------------+------------+------------+
        |    | Jane | Jane@doe.com | $2a$12$dXx8nsOeQGSmZohLn3zQo.BDRCk1dpALvzGkRtI5cnkKN.WvSe/3m |            |            |
        +----+------+--------------+--------------------------------------------------------------+------------+------------+
        1 row in set

        [27] pry(main)> u = User.find_by(email: "John@doe.com")
        User Load (0.2ms)  SELECT "users".* FROM "users" WHERE "users"."email" = ? LIMIT ?  [["email", "John@doe.com"], ["LIMIT", 1]]
        +----+------+--------------+--------------------------------------------------------------+-------------------------+-------------------------+
        | id | name | email        | password_digest                                              | created_at              | updated_at              |
        +----+------+--------------+--------------------------------------------------------------+-------------------------+-------------------------+
        | 1  | John | John@doe.com | $2a$12$9MT0ws7VPVVLlSruU5jI8Oge4BlEJ/jOncrOwfFEAbBtvaaLW6FFK | 2020-06-30 14:47:48 UTC | 2020-06-30 14:47:48 UTC |
        +----+------+--------------+--------------------------------------------------------------+-------------------------+-------------------------+
        1 row in set
        [29] pry(main)> u.authenticate("password")
        +----+------+--------------+--------------------------------------------------------------+-------------------------+-------------------------+
        | id | name | email        | password_digest                                              | created_at              | updated_at              |
        +----+------+--------------+--------------------------------------------------------------+-------------------------+-------------------------+
        | 1  | John | John@doe.com | $2a$12$9MT0ws7VPVVLlSruU5jI8Oge4BlEJ/jOncrOwfFEAbBtvaaLW6FFK | 2020-06-30 14:47:48 UTC | 2020-06-30 14:47:48 UTC |
        +----+------+--------------+--------------------------------------------------------------+-------------------------+-------------------------+
        1 row in set

    - Modify application.html.erb (according to bootstrap-documentation) and wrap the 'yield' in an container-div:
      <body>
        <div class="container">
          <%= yield %>
        </div>
      </body>

    - Modify index.html.erb (create a bootstrap "row", See getbootstrap.com/css/) that contains 2 divs:
        <div class="row">
            <div id="registration" class="col-md-6">
                <h1>Register</h1>
            </div>
            <div id="login" class="col-md-6">
                <h1>Login</h1>
            </div>
        </div>


    - Then go to bootstrap.com/css/#forms  and grab the form template and paste it after the "row"-div in app/views/users/index.html.erb

    - Now translate the pasted from-html into erb using the respective DSL (form_for ...)

    - Afterwards comment out the pasted form-HTML

    - Use 'resources :players' insteqd of the 7 REST-full routes in routes.rb

    - Add 'resources :users, only: [:index, :create]' to routes.rb






END
