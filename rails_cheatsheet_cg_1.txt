#########################################################################################################
# Created by: h|eg "rails|rake" | sed -e "s/\s*[0-9]*\s*//" | tee -a ~/dotfiles/rails_cheatsheet_cg_1.txt
#########################################################################################################

# rake db:migrate
# rake db:rollback
# rake db:migrate:status
# rake --tasks
# rails c
#     Then: 'Hirb.enable'  (see ~/workspace/rails_apps/tutorial_apps/league/.pryrc)
#           chris = Player.create(name: "", age: 51)
#
# rails g model player name:string age:integer

# rails g model address street:string player:references
# ==>
#        class Address < ApplicationRecord
#          belongs_to :player   # automatically (by 'player:references') created association
#                               # creates a 'player_id' column (= 'foreign-key' to the 'Players-Table') in the 'Address-Table'
#                               # which references one Player in the 'Player-table'
#                               # i.e. an address keeps track which player lives on that address
#                               # i.e. an instance_method (:player) will be created on an Address object
#                               # that when called queries the Player-Table which Player belongs to that address
#        end

#
#        cat  db/migrate/20200625170445_create_addresses.rb
#
#        class CreateAddresses < ActiveRecord::Migration[6.0]
#          def change
#            create_table :addresses do |t|
#              t.string :street
#              t.references :player, null: false, foreign_key: true
#
#              t.timestamps
#            end
#          end
#        end
#
#


cd /home/cg/workspace/rails_apps/tutorial_apps/CS50_Rails_Seminar/todo_list_final/
rake db:migrate
rake db:migrate
vi /home/cg/workspace/rails_apps/tutorial_apps/CS50_Rails_Seminar/todo_list_final/db/migrate/20151101200932_create_items.rb
v /home/cg/workspace/rails_apps/tutorial_apps/CS50_Rails_Seminar/todo_list_final/db/migrate/20151101200932_create_items.rb
rake db:migrate
rails s
rails s -h
rails s -u thin
rails s -u puma
rails new pokedex
rails g scaffold Pokemon name:string element:string
rake db:migrate
alias r_s='rails s'
cd ~/workspace/rails_apps/tutorial_apps/pokedex
cd ~/workspace/rails_apps/tutorial_apps/pokedex
cd workspace/rails_apps/tutorial_apps/blog/node_modules/querystring/test
rake db:migrate:status
alias r_dbm='rake db:migrate'
rake db:migrate:status
rails c
rake db:migrate:status
rake db:rollback
rake db:migrate:status
rails c
alias r_dbr='rake db:rollback'
rails c
alias r_dbs='rake db:migrate:status'
rake db:status
rake -T
rake db:migrate:status
rake db:migrate
rake db:migrate:status
h|egrep "rails|rake"
h|egrep "rails|rake" >> ~/dotfiles/rails_cheatsheet_cg_1.txt
vi ~/dotfiles/rails_cheatsheet_cg_1.txt
~/workspace/rails_apps/tutorial_apps/league
~/workspace/rails_apps/tutorial_apps/league
rails db:migrate:status
rake db:migrate:status
alias r_dbm='rails --tasks'
rails --help
rails g --help
rails g -h
rails -h
rails t
h|egrep "rails|rake"
rails db:migrate:status
rails db:rollback
rails db:migrate:status
rails db:rollback
rails db:migrate:status
rails db:migrate
rails db:migrate:status
cd /home/cg/workspace/rails_apps/tutorial_apps/league/



Add new migrations (See https://guides.rubyonrails.org/active_record_migrations.html )
------------------

rails g migration AddColumnLastNameToPlayers

# => db/migrate/20200624163611_add_column_last_name_to_players.rb    will be created with EMPTY 'change' CALLBACK METHOD !!!
#
# cat db/migrate/20200624163611_add_column_last_name_to_players.rb
#
# class AddColumnLastNameToPlayers < ActiveRecord::Migration[6.0]
#   def change
#   end
# end
#
# Then edit this file by inserting the intended behavior expresses by the name of the migration (AddColumnLastNameToPlayers)
#
# cat db/migrate/20200624163611_add_column_last_name_to_players.rb
# class AddColumnLastNameToPlayers < ActiveRecord::Migration[6.0]
#   def change
#     add_column :players, :last_name, :string
#   end
# end


# rails g migraton RenameNameColumnToFirstName

# cat db/migrate/20200624163611_add_column_last_name_to_players.rb
class ActiveRecord::Migration[6.0]
    def change
        rename_column :pplayers, :name, :first_name
    end
end


# Check migration status
# rake db:migrate:status     # r_db_status
#
# ==> We see that the status of the last migration inside the displayed migrations table is 'down'
down     20200624163611  Add column last name to players

# Run "rake db:migrate"      # r_db_migrate
# ==> runs migration and hence (if successfull) changes the status of the new migration to 'up'

# Run "rake db:rollback"     # r_db_rollback
# ==> rolls back last migration whose status is 'up'

# rake db:rollback STEP=3
# ==> rolls back the last 3 successfull migrations





Rails Validations (see https://guides.rubyonrails.org/active_record_validations.html )
-----------------

# There are 2 types of validations:

## validations running on new data before entering the DB
      (e.g. to verify user data [filled in form and form submitted])

## validations running on existing data
      ( = updating data in the DB)



Edit app/models/player.rb:

class Address < ApplicationRecord      # subclasses ActiveRecord::Base
end


#######
class Player < ApplicationRecord
  has_one :address # a Player can only have one address at a time
  # an instance_method (:address) will be created on an Player object
  # that when called queries the Address-Table which Address belongs to that player

  belongs_to :team # Manually added: creates an instance method 'team' on player object

  has_many :appearances
  has_many :games, through: :appearances                   # via Accociation-table Appearance

  # has_many :friend    # a Player can have more than one Friends

  validates :first_name, presence: true

  # Expect a non-empty last_name ONLY when Player object is created
  # Note that by restricting via (on: create)
  # setting an existing NON-empty last_name to "" (=> eraase last_name)
  # was made possible
  validates :last_name, presence: true, on: :create

  validates :age, presence: true, numericality: {greater_than: 0, less_than_or_equal_to: 100}


  # Also consider custom validation :first_name_starts_with_vowel?
  validate :first_name, :first_name_starts_with_vowel?

  # Custom validation
  def first_name_starts_with_vowel?
    vowels = "aeiou".split("")
    unless vowels.include? first_name[0].downcase
      errors.add(:first_name, "must start with a vowel")
    end
  end

end

#######

class Game  < ApplicationRecord       # subclasses ActiveRecord::Base
    has_many :appearances
    has_many :players, through: :appearances                 # via Accociation-table Appearance
end

# Apperance is in association-table  (keeps track which player belongs to which games and vice versa (many-to-many relationship))
# i.e. which Games a player plays and which Players are participating in a Game
class Appearance < ApplicationRecord   # subclasses ActiveRecord::Base
    belongs_to :player
    belongs_to :game
end

class Team < ApplicationRecord         # subclasses ActiveRecord::Base
    has_many :players                  # manually added: indicates that an owner (Team) can have more than one ownees (Player)
end



# MANY-TO-MANY relationships (2:22:30)

rails g model team name:string

rails g migration AddTeamReferenceToPlayer team:references

==>

class AddTeamReferenceToPlayer < ActiveRecord::Migration[6.0]
  def change
    # add_reference :players, :team, null: false, foreign_key: true   # Generated by rails (via team:references )
                                                                      # in 'rails g  migration AddTeamReferenceToPlayer team:references'
                                                                      # ==> have to manually change 'null:false' to 'null:true'
                                                                      # to prevent migration being rolled back by SQLite3
    add_reference :players, :team, null: true, foreign_key: true
  end
end


END
